---
# Source: coder/templates/coder.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coder
  annotations: 
    {}
  labels:
    helm.sh/chart: coder-0.12.9
    app.kubernetes.io/name: coder
    app.kubernetes.io/instance: coder
    app.kubernetes.io/version: "0.12.9"
    app.kubernetes.io/managed-by: Helm
---
# Source: coder/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: coder-workspace-perms
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["*"]
---
# Source: coder/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: coder
subjects:
  - kind: ServiceAccount
    name: coder
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: coder-workspace-perms
---
# Source: coder/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: coder
  labels:
    helm.sh/chart: coder-0.12.9
    app.kubernetes.io/name: coder
    app.kubernetes.io/instance: coder
    app.kubernetes.io/version: "0.12.9"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  sessionAffinity: ClientIP
  ports:
    - name: "http"
      port: 80
      targetPort: "http"
      protocol: TCP
  selector:
    app.kubernetes.io/name: coder
    app.kubernetes.io/instance: coder
---
# Source: coder/templates/coder.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coder
  labels:
    helm.sh/chart: coder-0.12.9
    app.kubernetes.io/name: coder
    app.kubernetes.io/instance: coder
    app.kubernetes.io/version: "0.12.9"
    app.kubernetes.io/managed-by: Helm
  annotations: 
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: coder
      app.kubernetes.io/instance: coder
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coder
        app.kubernetes.io/instance: coder
    spec:
      serviceAccountName: coder
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.coder.com
                  operator: In
                  values:
                  - "true"
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
        - name: coder
          image: "ghcr.io/coder/coder:v0.12.9"
          imagePullPolicy: IfNotPresent
          resources:
            {}
          env:
            - name: CODER_ADDRESS
              value: "0.0.0.0:8080"
            # Set the default access URL so a `helm apply` works by default.
            # See: https://github.com/coder/coder/issues/5024
            # Used for inter-pod communication with high-availability.
            - name: KUBE_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CODER_DERP_SERVER_RELAY_URL
              value: "http://$(KUBE_POD_IP):8080"
            
            - name: CODER_ACCESS_URL
              value: https://coder.sharing.io
            - name: CODER_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: superuser-password
                  name: stackgres
            - name: CODER_PG_CONNECTION_URL
              value: postgres://postgres:$(CODER_PG_PASSWORD)@stackgres:5432/postgres?sslmode=disable
            - name: CODER_TEMPLATE_AUTOIMPORT
              value: kubernetes
            - name: CODER_VERBOSE
              value: "true"
            - name: CODER_AUDIT_LOGGING
              value: "false"
            - name: CODER_TELEMETRY
              value: "false"
            - name: CODER_TELEMETRY_TRACE
              value: "false"
            - name: CODER_WILDCARD_ACCESS_URL
              value: '*.coder.sharing.io'
          ports:
            - name: "http"
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/v2/buildinfo
              port: "http"
              scheme: "HTTP"
          livenessProbe:
            httpGet:
              path: /api/v2/buildinfo
              port: "http"
              scheme: "HTTP"
          
          volumeMounts: []
      
      volumes: []
---
# Source: coder/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: coder
  labels:
    helm.sh/chart: coder-0.12.9
    app.kubernetes.io/name: coder
    app.kubernetes.io/instance: coder
    app.kubernetes.io/version: "0.12.9"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
spec:
  
  ingressClassName: "nginx"

  rules:
    - host: "coder.sharing.io"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: coder
                port:
                  name: "http"
    - host: "*.coder.sharing.io"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: coder
                port:
                  name: "http"
  tls:
    - hosts:
        - "coder.sharing.io"
      secretName: "letsencrypt-prod"
    - hosts:
        - "*.coder.sharing.io"
      secretName: "letsencrypt-prod"
