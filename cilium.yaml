---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-ca-secret
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRWG9iRzVnSXFMR2Q3TEVEMnQzOEl1akFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOb2RXSmliR1V0WTJFdVkybHNhWFZ0TG1sdk1CNFhEVEl5TVRFeU1qQXpNVFEwT1ZvWApEVEkxTVRFeU1UQXpNVFEwT1Zvd0hqRWNNQm9HQTFVRUF4TVRhSFZpWW14bExXTmhMbU5wYkdsMWJTNXBiekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTk9Lc3A0TXJ6WnRqQnluVkJmOTNKUEcKanJzb2p6TVYwOFg3RW9JeWRmL01uY1l1TVdGYTc5Z05sd3pYYmxOYUtQazBSdHhKSTl1RCt5Vk9CZ2N6TTR3Ygp3Z3NIL3RqRWZFWHBmV0NFS0JPamJab3I4ZkRsZWxDUGk5S0wyYzNnNThMbEJPSTdoenB0UWtvVGtlT3ljZ3pSCkNkOFJtRndreWJHdTljdmxrNnBTbHpITVNEQk9GZWNYUnlhbXdZN2M2bDA4ZXZPc2ZXU0xzUHJ3REY3TXhwZW8KdFBtQTlaWEZYL2xqald0dzFxeldIdzgvNXB6Wm1LQUhnQVhjUmloQ2lLTlhGVWVWSFA5U1U0MEFkKzRRVTM2WApSaFNLUDlsd3RjWGhWNU5xakJJdzcweHZON21JTm1wQkhYZTc1UzBvbEdGQlBqdkk3eDFtWWpkZTZ1cTRGSGtDCkF3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlF0MmZpYTVDZ2pTa1kyRWRYNgp1SjJZM0h5dk5EQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFXVTVZeXdxamdZWHJDOGVid29HZW5zMWg4dG1CCklvUWxrZUt0MlN2SDFBeHIvWXU4R1RabjVxc3lDak9GRWlveFEveWJEQmxFb1dlcEtCd2kwS0p5UjVuUFcwMksKRmpKWUh1ZlJGSnIrbkxhUlk2Tlgzck1ZOFNRK0Y2MjlLcHhHZzMxUlhQQTJDdGxTVmtPa3hFcmNMZkN4cTlXOApwMlprbjVLTEtRcGJodGpjTExWTm9hWnVycWJMSEF5eHF6eWtrTmhvbFBkSHlWNVkzcUd3c1NqNHB2RTVQVjFiCjY3WlZKUmVhNG15NXY2RE1lT0w2UTExTGRGeVhIdnA5QW1vNENscG5PcE1kTU9XYkdiOGozRnRFeGN3NTNNc1cKU0RuQlB5V0E0dW9tbkJ0U09JVUlOY3VYUVR3TlE5QjZWOTBsVE5KTzNoSGhMSVpFcmdjQ1psWlB3Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMDRxeW5neXZObTJNSEtkVUYvM2NrOGFPdXlpUE14WFR4ZnNTZ2pKMS84eWR4aTR4CllWcnYyQTJYRE5kdVUxb28rVFJHM0VrajI0UDdKVTRHQnpNempCdkNDd2YrMk1SOFJlbDlZSVFvRTZOdG1pdngKOE9WNlVJK0wwb3ZaemVEbnd1VUU0anVIT20xQ1NoT1I0N0p5RE5FSjN4R1lYQ1RKc2E3MXkrV1RxbEtYTWN4SQpNRTRWNXhkSEpxYkJqdHpxWFR4Njg2eDlaSXV3K3ZBTVhzekdsNmkwK1lEMWxjVmYrV09OYTNEV3JOWWZEei9tCm5ObVlvQWVBQmR4R0tFS0lvMWNWUjVVYy8xSlRqUUIzN2hCVGZwZEdGSW8vMlhDMXhlRlhrMnFNRWpEdlRHODMKdVlnMmFrRWRkN3ZsTFNpVVlVRStPOGp2SFdaaU4xN3E2cmdVZVFJREFRQUJBb0lCQVFDREVucFFBYTRDdkdmSApUVXFHdnc0UUprUkQ1UUt0ZFlYTk14OHB1dGh3VWJra2xYU1ZUUUkxVFY1ZFg1S0ZaT1RrWENiWDBSMjlvdzVXCjgvdzZNOWhwcEwxYmxtMnFwRHdZR1c5TkFUWFB6VUJZK1lla2FwdWFGUWRld3JhR29TY1pGRXd0WFJNUithYk0KUFVuMDJwbGVKWnZITXFERDN5dDF3K0dhbjdvYUdvZUViVFMyVmxTdUZOYWxnc0hDcW1GVlZFRm9HenVwT1BXUApQY0crWnJ4NURUTThLOVdiWC9xWVdBU3oxeFZFRE1QaGs3R0h1MEZJSno0djFSRC9qSy9JNXZrVVcrYzRhajF0CnBUR2tySE9CNDV2dTBidW15L0VraTFCV1RSVmNOQzBTb0g2Tm1xSGRTMGovMXR4cW5iZkIzRFFmZ2xzS3RxWUoKRmJEdmx3ZUJBb0dCQU5vVUt4NnJHdmQrRkx6VjVYUlQ2OFlQSE56N0gxT0NUTEhGRksrTTNXcFIveGNXQUdJZwphajFpZWRsejVqUVAvdzdySFlhN3NaUS80a3B6c3g3SmRzS2V5UkpaYjdpV2ZBMjdDbk9ocU5jTGxtQXJJNkJ5CjR3K1EvUlN6SlFOc0tCOXM3K2M0QldTZTkzUTh1ekt2dGtiMGNsZHNuVTVzQ3J0a0ZPL1JGQllwQW9HQkFQaFQKaUlmQkNLaTBxam1CRzFVR3FtSExDK0xjdzZKdXJXNW5xTHVLcVZobkVLSlAzZkhPeDN6a0Jnd0cyWTFhaGs0VQpQTWhmQXRQbndTaEppSU9oVys2NzE1T3B1MGZGOHZiNC9Ma0lLTVQ5dEZJTUZ1T0kwNE9rcUlRTmU4OVdWT2pyCjRCM0pkSEx3aUdURHdEaWhia2NtQ1RrYm1lTVNGL2hONE9HWFQ3WFJBb0dBT1F3OW0zQTNSYmI5eGNoT2xmZSsKSGJtbVcwaDJFV3BzbGJSd2pOdlVzQk56SDU3cHlzR2dDUjdSc1VqWVY1WTNxcmRtcWZBL3JBQnFPZis2UTd1QQpEYmxyOEJqbFdPeEUxM0t1Y1VGQTRjQnVQZ29LNzlZZC85eDEyQXhsQ2xnb3hzL0Fra1BkWlUwUWZwL0VlS1h1CmtQRXhXQjFacVVJcUxJc3B6dkpxeHNFQ2dZRUFtRnNmN0RKNTdwQVIxSUFxMWNybUpHUGdZZ3NTbUlrUkxTaTYKTkg1SmtpeUIzeVBqUnlXWDdUODFtcEZsVHIyWW96VDFhZllwRlB3ZTNXbm9NT0tDTmdIWHJRZzVHRHNSNjRjdAoveFJMZHprMU5oV213V2xFWklOVXhOaEUreHU3c3NCdFc3a3JFZzRUa01jdEcxR29DRTBFNFozV2w2T1ZRMG44CnpFdjZvdEVDZ1lCV3dlWmswRXdabkpXMFk5WE1oOExTVzZuN0d2WVlKZmEwUXJiSGZ3RWRGL0NEU1FNQS8rb0sKVC9NbVFaVEYwd1lxaDZScmhLYnpzT2dpVWZTbHhtc2YwcFB3bk45QlR2L3JDbjhYSmFINlROSFV6UDYwUEFJbAp4ZUJ6OS8xT0ZhOHdSSUFwNkpWeldGOC9DUlRMVzBoYWJ1SEhXOVZoVm1tRXduVHByUzlpY0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRWG9iRzVnSXFMR2Q3TEVEMnQzOEl1akFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOb2RXSmliR1V0WTJFdVkybHNhWFZ0TG1sdk1CNFhEVEl5TVRFeU1qQXpNVFEwT1ZvWApEVEkxTVRFeU1UQXpNVFEwT1Zvd0hqRWNNQm9HQTFVRUF4TVRhSFZpWW14bExXTmhMbU5wYkdsMWJTNXBiekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTk9Lc3A0TXJ6WnRqQnluVkJmOTNKUEcKanJzb2p6TVYwOFg3RW9JeWRmL01uY1l1TVdGYTc5Z05sd3pYYmxOYUtQazBSdHhKSTl1RCt5Vk9CZ2N6TTR3Ygp3Z3NIL3RqRWZFWHBmV0NFS0JPamJab3I4ZkRsZWxDUGk5S0wyYzNnNThMbEJPSTdoenB0UWtvVGtlT3ljZ3pSCkNkOFJtRndreWJHdTljdmxrNnBTbHpITVNEQk9GZWNYUnlhbXdZN2M2bDA4ZXZPc2ZXU0xzUHJ3REY3TXhwZW8KdFBtQTlaWEZYL2xqald0dzFxeldIdzgvNXB6Wm1LQUhnQVhjUmloQ2lLTlhGVWVWSFA5U1U0MEFkKzRRVTM2WApSaFNLUDlsd3RjWGhWNU5xakJJdzcweHZON21JTm1wQkhYZTc1UzBvbEdGQlBqdkk3eDFtWWpkZTZ1cTRGSGtDCkF3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlF0MmZpYTVDZ2pTa1kyRWRYNgp1SjJZM0h5dk5EQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFXVTVZeXdxamdZWHJDOGVid29HZW5zMWg4dG1CCklvUWxrZUt0MlN2SDFBeHIvWXU4R1RabjVxc3lDak9GRWlveFEveWJEQmxFb1dlcEtCd2kwS0p5UjVuUFcwMksKRmpKWUh1ZlJGSnIrbkxhUlk2Tlgzck1ZOFNRK0Y2MjlLcHhHZzMxUlhQQTJDdGxTVmtPa3hFcmNMZkN4cTlXOApwMlprbjVLTEtRcGJodGpjTExWTm9hWnVycWJMSEF5eHF6eWtrTmhvbFBkSHlWNVkzcUd3c1NqNHB2RTVQVjFiCjY3WlZKUmVhNG15NXY2RE1lT0w2UTExTGRGeVhIdnA5QW1vNENscG5PcE1kTU9XYkdiOGozRnRFeGN3NTNNc1cKU0RuQlB5V0E0dW9tbkJ0U09JVUlOY3VYUVR3TlE5QjZWOTBsVE5KTzNoSGhMSVpFcmdjQ1psWlB3Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZRENDQWtpZ0F3SUJBZ0lRQ0owRFdGL2pmZnNuYkZZUzVNVHVRREFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOb2RXSmliR1V0WTJFdVkybHNhWFZ0TG1sdk1CNFhEVEl5TVRFeU1qQXpNVFEwT1ZvWApEVEkxTVRFeU1UQXpNVFEwT1Zvd0tqRW9NQ1lHQTFVRUF3d2ZLaTVrWldaaGRXeDBMbWgxWW1Kc1pTMW5jbkJqCkxtTnBiR2wxYlM1cGJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtrblozZUEKMm8wMGFQbnVYUjYya29HVUhMaFNyWVBiemlDRDRPYk5zNExBQ0VBd3hUZWJTWDlybnZqRDY3U0RKWUdncW9UeQpsTUhKN0MxUEhiQUhjRnVVbEx1U21MR2E1aE9CY050S3gvWUNpL3RXSThLQUtzM3U3K2sxa0VlZktBUkNTT3RnClNoeFhQQjIzNGVzWVk5bm9kdU10cHZyUFB6aGFNQXNRR01nbGJtOXhaN1FuWTVwVFZGd0ZVOVRIUHVzV3BENUQKSncxZ1NwK2xGK0V4R1JoSjhkdXBPRmpMTU1lVFZkNjZqdVpJMThUQm4yZm5razIxa3I4bElVZzMwUElZcU5UNQpMbWVRNzhzQldoUXJZV0pJd09HeVhDOGxuZ3VVcXlNSTh2QVNmM3BXNExLRmJ0WGo4TWQ1V0JoTDlIdGFXelBSClFQeWpHczlwajZwazc5a0NBd0VBQWFPQmpUQ0JpakFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXcKRkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVQpMZG40bXVRb0kwcEdOaEhWK3JpZG1OeDhyelF3S2dZRFZSMFJCQ013SVlJZktpNWtaV1poZFd4MExtaDFZbUpzClpTMW5jbkJqTG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWVEMWVOVFNldUpjUHAyU3EKYys4WHpCSlJ4UW9zanp6WmxRNSs1c21iTDArS1ltWjlLMGJDSWFZeFFSSzdpc2RtRlNwQTk4bmRWb3huSi9Lbwo4dCtKYTBUVG03bTVKRmgzNk1NM1VFM0JRRE8yeVpsazZ3M0hnUzZRZVBEeVNKbzQwRGIrNGc2d2MvWGNKREpzCklLMkx6eGZTVE9KMXJaaFNuVlh4R1BNZThrOUF1Q2F0aERNY0FxdW1xZHFIOXdaVCtaY0gxS3F1cldaaGZlcVIKNzZuc0tQZHJVNk1sdjE0WUxxaXpHdzAxVFNQTVhuUHcwcy9ydDZJZGd4ZWJ2cEdac2RlS0dwSWNXL3F1cDNoVgpDSzlkaDVhaHIrVmkraW5oMExycVlSamRGY1l4aWVkbXYzZlg4OFBzc0wzSGtIejRwQUREVnJuUkFHUFkzckRmCkFIYlEyZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcVNkbmQ0RGFqVFJvK2U1ZEhyYVNnWlFjdUZLdGc5dk9JSVBnNXMyemdzQUlRRERGCk41dEpmMnVlK01QcnRJTWxnYUNxaFBLVXdjbnNMVThkc0Fkd1c1U1V1NUtZc1pybUU0RncyMHJIOWdLTCsxWWoKd29BcXplN3Y2VFdRUjU4b0JFSkk2MkJLSEZjOEhiZmg2eGhqMmVoMjR5Mm0rczgvT0Zvd0N4QVl5Q1Z1YjNGbgp0Q2RqbWxOVVhBVlQxTWMrNnhha1BrTW5EV0JLbjZVWDRURVpHRW54MjZrNFdNc3d4NU5WM3JxTzVralh4TUdmClorZVNUYldTdnlVaFNEZlE4aGlvMVBrdVo1RHZ5d0ZhRkN0aFlrakE0YkpjTHlXZUM1U3JJd2p5OEJKL2VsYmcKc29WdTFlUHd4M2xZR0V2MGUxcGJNOUZBL0tNYXoybVBxbVR2MlFJREFRQUJBb0lCQUN3K2lFdXp3bmFvdk1TUwoybnlNR0tvWUNhTVV6Um51Um00dTBJYk9TeVBxQXI1M2d6NVdPZFZBV3lhS2FINmd4eEN1NjZzMm9ENUlDS1NaClN4U2QvWCtXejRoNGdjUUMxaWRIOWpNRnptUEVxc1NrOVZtTW1LV2cxOVBTRk5rSEFqcUs4L1BORGRWMzQ5dUsKRzJlWXk1VlZ2ck1SWDltK2w3U3ZzbDFTYW9qL0JIS3J1VmpLMHBwSkszLytYNGZPeGhFTHE0YmFYY2pEblNUWApsNXBHUi9kTTg5SDdaN0xuRWgyMElKL01DRTYwWDNvd2toUW5yYW5OcDR3WTZhZ2cxeitpZUx5aFl1L3owS2kxCllNcm9WVjdRWHM3U3lOenBEMml6eStVT3JDQlFGNEJyc2ladExSSGNKTmIxVDk2eWtpd3E5bEgwMGhoVkZQbTUKNTJoZVZlRUNnWUVBeGZZbGhzZWpKekh1alBMZFIrRjRxMlREaUpERzhTZDEvWi8wTnNVTmhKaG5sbWVGVlZETgpCYW9SVzFLeVZSTlFObWVSeTlibDRLOHI0a3VlVHpUZXpGeU8zMXFKVjhVSjFiYWtHTnVqZ1VGa0JDeUhnV1g5Ci9Hb2h2SWx2UGIycXVWcTh3bHEwRVoyd0ZuWVZFZXIyWU9ITTZwZm0zVUNDNHVmSnJ5RWtBKzBDZ1lFQTJyOGcKSnI5NUMyQ3BSUlFmcVN4NFZYWWNNNjhSM3RESERzYlBtMlpOcVNVS21rL3I4dE91cE9melVzNzhtd2l4b1lqcAp3SENpRnF2SGxmWkFzWitLbTcxaTgrOHdqZUxLOUFVS2xrK2FIdXlSZ0E2MzNlMHRUVEpwTjBsT2JCL3A2WW9ZCkVHU05QZzAwUXJEUmRiSjYzbkE2VnVEN3pVMDFNamUvWnFQZXRoMENnWUFjaDVYdTc3U1d3SDUxdDhhbVJsdGkKc0JueUE1TjRTOHlZYWNZRFlyREpERUhaamovTUJPSVhUK1JDZWcrVGJUNGhLUm44KzVLVHFBczJDTm5lNW1xNQpueGxFSFVNdjhBaXowU2VqSVh4VjgzdWJrbU5SQmNidDZzbkQ1emF0K2ppeGo5OG1UM1ltRjhpNTQvaXpaVjV1CnBmd25UdzhKa2ZPTENnYXFBNmV5SFFLQmdIU2d2b1dxUk9GYUVpWHdpc2pxR3VhRjZKZHQyanRRV1RGNXNxc0sKS3BIcVcvTFdkZGlzSUV0d0YvMm91bW4yZ3E2N2p0VzV0OUlhbUhsT0tFUUw2aDBMSnIwa1pHRGg4SStXT0lUWAp3RGFJcnpMMXBmYS9SQTRLdUtwdmZVNk0zV3hVNG11ckVOdHFzdGh6NmRtMDVXbS9zSHN0elZNeXZSQWZSUDkyCms0SEpBb0dBQ0pDb25Ba1dOUnhETktOM0hSTzNPVE5nNjhvN21US2VNR0VsdmwvdDFkblBrZ2FZNGZEcEVHT3cKVDJsMjVvcXJiM0lkeEtDbVVTc0xQcnFPZEUxckMvN25yYXR4WWl6SGRqK0YrWmVtVDlRNkxYLzBrcjdUeXF3SQpMcktIR2xMSDh6MFBZcDNYSWUzbG1weTFwTG1ydlVwWFVhWjZFWHB3ZkpJZnFiQjlpSmM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  # Disable the usage of CiliumEndpoint CRD
  disable-endpoint-crd: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/policy/intro/#policy-enforcement-modes
  enable-policy: "default"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "true"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: 5s

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  # bpf-lb-bypass-fib-lookup instructs Cilium to enable the FIB lookup bypass
  # optimization for nodeport reverse NAT handling.
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: default
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: ""

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  tunnel: vxlan
  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv6-masquerade: "true"

  enable-xt-socket-fallback: "true"
  install-iptables-rules: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-bandwidth-manager: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement:  "disabled"
  enable-host-reachable-services: "true"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-session-affinity: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path:  "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  cluster-pool-ipv4-cidr: "10.244.0.0/16"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  annotate-k8s-node: "true"
  remove-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  # To annotate the k8s node with Cilium's metadata
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  # Deprecated for removal in v1.10
  - create
  - list
  - watch
  - update

  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints
  - ciliumendpoints/status
  - ciliumnodes
  - ciliumnodes/status
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumlocalredirectpolicies/status
  - ciliumegressnatpolicies
  - ciliumendpointslices
  verbs:
  - '*'
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumnetworkpolicies/status
  - ciliumnetworkpolicies/finalizers
  - ciliumclusterwidenetworkpolicies
  - ciliumclusterwidenetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/finalizers
  - ciliumendpoints
  - ciliumendpoints/status
  - ciliumendpoints/finalizers
  - ciliumnodes
  - ciliumnodes/status
  - ciliumnodes/finalizers
  - ciliumidentities
  - ciliumendpointslices
  - ciliumidentities/status
  - ciliumidentities/finalizers
  - ciliumlocalredirectpolicies
  - ciliumlocalredirectpolicies/status
  - ciliumlocalredirectpolicies/finalizers
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - update
  - watch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: cilium
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
            - matchExpressions:
              - key: beta.kubernetes.io/os
                operator: In
                values:
                - linux
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - cilium
            topologyKey: kubernetes.io/hostname
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.11.6@sha256:f7f93c26739b6641a3fa3d76b1e1605b15989f25d06625260099e01c8243f54c"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cni-chaining-mode
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: custom-cni-conf
              optional: true
        lifecycle:
          postStart:
            exec:
              command:
              - "/cni-install.sh"
              - "--enable-debug=false"
              - "--cni-exclusive=true"
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: cni-path
          mountPath: /host/opt/cni/bin
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
      hostNetwork: true
      initContainers:
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.11.6@sha256:f7f93c26739b6641a3fa3d76b1e1605b15989f25d06625260099e01c8243f54c"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        securityContext:
          privileged: true
      - name: wait-for-node-init
        image: "quay.io/cilium/cilium:v1.11.6@sha256:f7f93c26739b6641a3fa3d76b1e1605b15989f25d06625260099e01c8243f54c"
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          until test -s "/tmp/cilium-bootstrap.d/cilium-bootstrap-time"; do
            echo "Waiting on node-init to run...";
            sleep 1;
          done
        volumeMounts:
        - name: cilium-bootstrap-file-dir
          mountPath: "/tmp/cilium-bootstrap.d"
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.11.6@sha256:f7f93c26739b6641a3fa3d76b1e1605b15989f25d06625260099e01c8243f54c"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      terminationGracePeriodSeconds: 1
      tolerations:
        - operator: Exists
      volumes:
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
      - name: cilium-bootstrap-file-dir
        hostPath:
          path: "/tmp/cilium-bootstrap.d"
          type: DirectoryOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        secret:
          secretName: cilium-clustermesh
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          optional: true
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: ca.crt
                path: client-ca.crt
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
---
# Source: cilium/templates/cilium-nodeinit/daemonset.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: cilium-node-init
  namespace: kube-system
  labels:
    app: cilium-node-init
spec:
  selector:
    matchLabels:
      app: cilium-node-init
  template:
    metadata:
      annotations:
      labels:
        app: cilium-node-init
    spec:
      tolerations:
        - operator: Exists
      hostPID: true
      hostNetwork: true
      priorityClassName: system-node-critical
      volumes:
      # To access iptables concurrently with other processes (e.g. kube-proxy)
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
      containers:
        - name: node-init
          image: "quay.io/cilium/startup-script:62bfbe88c17778aad7bef9fa57ff9e2d4a9ba0d8"
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          volumeMounts:
            # To access iptables concurrently with other processes (e.g. kube-proxy)
            - mountPath: /run/xtables.lock
              name: xtables-lock
          lifecycle:
          env:
          # STARTUP_SCRIPT is the script run on node bootstrap. Node
          # bootstrapping can be customized in this script. This script is invoked
          # using nsenter, so it runs in the host's network and mount namespace using
          # the host's userland tools!
          - name: STARTUP_SCRIPT
            value: |
              #!/bin/bash
              
              set -o errexit
              set -o pipefail
              set -o nounset
              
              echo "Link information:"
              ip link
              
              echo "Routing table:"
              ip route
              
              echo "Addressing:"
              ip -4 a
              ip -6 a
              mkdir -p "/tmp/cilium-bootstrap.d"
              date > "/tmp/cilium-bootstrap.d/cilium-bootstrap-time"
              echo "Node initialization complete"
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 2
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
    spec:
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: io.cilium/app
                operator: In
                values:
                - operator
            topologyKey: kubernetes.io/hostname
      containers:
      - name: cilium-operator
        image: quay.io/cilium/operator-generic:v1.11.6@sha256:9f6063c7bcaede801a39315ec7c166309f6a6783e98665f6693939cf1701bc17
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
